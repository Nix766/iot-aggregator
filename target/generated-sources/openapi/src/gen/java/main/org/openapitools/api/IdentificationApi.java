/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Identification;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-13T11:20:17.516825200+01:00[Europe/Prague]")
@Validated
@Tag(name = "identification", description = "the identification API")
public interface IdentificationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /identification : Metoda nacte identifikaci IOT serveru
     *
     * @return OK response (status code 200)
     *         or Service unavailable (status code 500)
     */
    @Operation(
        operationId = "getIdentification",
        summary = "Metoda nacte identifikaci IOT serveru",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Identification.class))),
            @ApiResponse(responseCode = "500", description = "Service unavailable")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/identification",
        produces = { "application/json" }
    )
    default ResponseEntity<Identification> getIdentification(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"firstName\" : \"Jan\", \"lastName\" : \"Novak\" }, \"address\" : { \"city\" : \"Praha\", \"street\" : \"Hlavni\", \"houseNumber\" : \"3D\" }, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
